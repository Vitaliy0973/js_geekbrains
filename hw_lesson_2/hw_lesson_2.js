//  1. Почему код дает именно такие результаты?

var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2  - префиксная форма инкрементирования, сначала увеличивает значение "а" на еденицу, а уже потом присваевает значение переменной.
// d = b++; alert(d);           // 1  - постфиксная форма инкрементирования, сначала выполняется присваивание значения переменной "b".
// c = (2 + ++a); alert(c);      // 5  - т.к. "а" уже равно 2, и используется префиксная форма инкрементирования, выражение выглядит так: c=(2+3).
// d = (2 + b++); alert(d);      // 4  - постпрефиксная форма. В момент присваивания выражение выглядит так: d=(2+2).
// alert(a);                    // 3  - к "а" дважды применялась префиксная форма инкрементирования.
// alert(b);                    // 3  - к "d" дважды применялась постфиксная форма инкрементирования.



//  2. Чему будет равен x? 

var a = 2;
var x = 1 + (a *= 2);        // x = 5



// 3. Объявить две целочисленные переменные — a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму;
// Ноль можно считать положительным числом.

var a = -3, b = 5;
if (a >= 0) {
    if (b >= 0) {
        console.log(a - b);
    } else if (b < 0) {
        console.log(a + b);
    }
} else if (a < 0) {
    if (b < 0) {
        console.log(a * b);
    } else if (b >= 0) {
        console.log(a + b);
    }
}



// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.

var x = 7;
switch (x) {
    case 1:
    case 2:
        for (; x <= 15; x += 1) {
            console.log(x);
        }
        break
    default:
        for (; x <= 15; x += 1) {
            console.log(x);
        }
        break;
}



// 5. Реализовать четыре основные арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.

function sum(x, y) {
    return x + y;
}

function subtraction(x, y) {
    return x - y;
}

function multiplication(x, y) {
    return x * y;
}

function division(x, y) {
    return x / y;
}



// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 — значения аргументов, operation — строка с названием операции. В зависимости от переданного значения выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (применить switch).

function mathOperation(arg1, arg2, operation) {

    switch (operation) {
        case "+":
            return sum(arg1, arg2);
        case "-":
            return subtraction(arg1, arg2);
        case "*":
            return multiplication(arg1, arg2);
        case "/":
            return division(arg1, arg2);
    }
}

console.log(mathOperation(10, 2, "/"));



// 7. Сравнить null и 0. Объяснить результат.

console.log(null == 0);         // false  - в JS null специальное значение, которое представляет собой "ничего", "пусто" или "значение не известно". Следовательно оно не может быть равно числу 0.

// 8. С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val — заданное число, pow –— степень.

function power(val, pow) {
    if (pow == 2) {
        return val * val;
    } else {
        return val * power(val, pow - 1)
    }
}

console.log(power(2, 9))